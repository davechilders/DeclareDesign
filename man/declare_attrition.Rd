% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_attrition.R
\name{declare_attrition}
\alias{declare_attrition}
\title{Attrition declarations}
\usage{
declare_attrition(attrition_function = default_attrition_function,
  formula = NULL, outcome_variable_name = "R", condition_names, sep = "_",
  assignment_variable_name = "Z", description = NULL, ...)
}
\arguments{
\item{attrition_function}{A function of data that returns a vector of 0s and 1s that indicate which subjects report their outcomes.}

\item{formula}{An optional formula to be passed to attrition_function}

\item{outcome_variable_name}{The name of the variable describing whether outcomes are reported. Defaults to "R".}

\item{condition_names}{An optional vector of treatment conditions to be passed to attrition_function.}

\item{sep}{A character string describing the separator for concatenating outcomes and conditions. Defaults to "_".}

\item{assignment_variable_name}{The name of the treatment assignment variable}

\item{...}{optional additional arguments to be passed to attrition_function.}
}
\value{
A potential_outcomes object
}
\description{
Attrition declarations are formally identical to potential_outcomes declarations. You provide a function of data (which includes a treatment assignment).  This function returns a vector of length N with 1's for units that report their outcomes and 0's for units that attrit.
The built-in default function allows for two kinds of noncompliance: the proportion of subjects who report may vary with the treatment assignment, or the proportion of subjects who report (regardless of their condition, i.e. Always-Reports) can be set.
}
\examples{
population <- declare_population(noise = declare_variable(), N = 1000)
sampling <- declare_sampling(n = 500)
attrition_1 <- declare_attrition(condition_names = c(0,1), 
                                 outcome_variable_name = "R1",
                                 assignment_variable_name = "Z", 
                                 reporting_proportions = c(.5, .7))

attrition_2 <- declare_attrition(condition_names = c(0,1), 
                                 outcome_variable_name = "R2",
                                 assignment_variable_name = "Z", 
                                 proportion_always_reporters = .8)

assignment <- declare_assignment(condition_names = c(0,1))

pop_draw <- draw_population(population = population)
smp_draw <- draw_sample(data = pop_draw, sampling = sampling)
smp_draw <- assign_treatment(data = smp_draw, assignment = assignment)
smp_draw <- draw_outcome(data = smp_draw, 
                         potential_outcomes = list(attrition_1, attrition_2))
with(smp_draw, table(Z, R1))
with(smp_draw, table(Z, R2))

}

