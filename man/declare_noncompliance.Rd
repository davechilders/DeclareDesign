% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_noncompliance.R
\name{declare_noncompliance}
\alias{declare_noncompliance}
\title{Noncompliance declarations}
\usage{

  declare_noncompliance(noncompliance_function = default_noncompliance_function,
  formula = NULL, outcome_name = "D", condition_names = NULL, sep = "_",
  assignment_variable_name = NULL, ...)
}
\arguments{
\item{noncompliance_function}{A function of data that returns a vector of treatments as received.}

\item{formula}{An optional formula to be passed to noncompliance_function}

\item{outcome_name}{The name of the variable describing treatment receipt. Defaults to "D".}

\item{condition_names}{An optional vector of treatment conditions to be passed to noncompliance_function}

\item{sep}{A character string describing the separator for concatenating outcomes and conditions. Defaults to "_".}

\item{assignment_variable_name}{The name of the treatment assignment variable}

\item{...}{optional additional arguments to be passed to noncompliance_function}
}
\value{
A potential_outcomes object
}
\description{
Noncompliance declarations are formally identical to potential_outcomes declarations. You provide a function of data (which includes a treatment assignment).  This function returns a vector of length N with the treatment as received.
The built-in default function implements one-sided noncompliance in which some subjects do not comply with their assigned treatment status.  Instead, they revert to a baseline condition (usually a control condition).
}
\examples{
population <- declare_population(noise = declare_variable(), N = 1000)
sampling <- declare_sampling(n = 500)
noncompliance <- declare_noncompliance(condition_names = c(0,1), 
                                       assignment_variable_name = "Z", 
                                       compliance_proportions=c(1, .5), 
                                       baseline_condition=0)
assignment <- declare_assignment(condition_names = c(0,1))

pop_draw <- draw_population(population = population)
smp_draw <- draw_sample(data = pop_draw, sampling = sampling)
smp_draw <- assign_treatment(data = smp_draw, assignment = assignment)
smp_draw <- draw_outcome(data = smp_draw, potential_outcomes = noncompliance)

head(smp_draw)
with(smp_draw, table(Z, D))
}

